一、面试对象的常见设计原则 (提高程序维护性，扩展性，复用性)
	单一职责：高内聚，低耦合
	开闭：一个对象对扩展开放，对修改关闭	(接口)
	里氏替换：在父类出现的地方都可以用其子类替代
	依赖注入：要依赖于抽象，不要依赖于具体实现。(Spring框架)
	接口分离：不应该强迫程序依赖它们不需要使用的方法(接口不应该提供太多行为)
	迪米特：一个对象应该对其他对象尽可能少的了解 (低耦合)
	
二、设计模式概述和分类
	A:经验的总结
	B:三类
		创建型：简单工厂模式，工厂模式，单例模式等6个 (创建对象)
		结构型：外观模式，适配器模式，装饰模式等7个 (对象的组成)
		行为型：模板方法模式等10个 (对象的功能)
		
三、改进的设计模式
	A:简单工厂模式
		概	又叫静态工厂模式。
		优  客户端不再负责类的创建，由工厂类实现。
		缺	但是不利于后期维护。
	B:工厂方法模式
		创建工厂接口，具体对象创建由工厂类子类实现。
		明确每个类职责，方便修改添加，增强维护性，扩展性。
		需要额外的编码，工作量增加。
	C:单例模式(掌握)
		保证类在内存中只有一个对象，类中自己创建对象，提供方法返回。
		a:饿汉式：类一加载就造对象。 开发使用(不会出问题的单例模式)	
		b:懒汉式：类在使用的时候再造对象。 面试(可能会出问题)
			问题：A:懒加载(延迟加载)
				  B:线程安全问题(要加synchronize)
	D:模板设计模式
		概：定义一个算法的骨架即一个抽象类，具体的算法延迟到子类中实现
		优：可以灵活的实现具体算法，满足用户多变的需求
		缺：如果骨架需要修改，则需要修改抽象类
	E:装饰设计模式	例如IO中BufferedReader等类
		概：使用被装饰类的一个子类的实例，在客户端将这个子类的实例交给装饰类。
		优：更灵活的扩展对象的功能，动态添加对象功能
		缺：可能会出现不合理的逻辑。
		
四、Runtime
	JDK提供的一个单例模式（饿汉式）应用的类。
	还可以调用dos命令。