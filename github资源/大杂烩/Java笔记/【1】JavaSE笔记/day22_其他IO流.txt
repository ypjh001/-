1:数据操作流(操作基本类型数据的流)(理解)
	(1)可以操作基本类型的数据
	(2)流对象名称	
		DataInputStream
		DataOutputStream

2:内存操作流(理解)
	(1)有些时候我们操作完毕后，未必需要产生一个文件，就可以使用内存操作流。
	(2)三种
		A:字节数组
			ByteArrayInputStream,ByteArrayOutputStream
		B:字符数组
			CharArrayReader,CharArrayWriter
		C:字符串
			StringReader,StringWriter
			
3:打印流(掌握) PrintWriter,PrintStream
	(1)	字节打印流 PrintStream
		字符打印流 PrintWriter
	(2)特点：
		A:只操作目的地,不操作数据源
		B:可以操作任意类型的数据
		C:两种打印流都不抛出IOException
		D:如果启用了自动刷新，在调用println()方法的时候，能够换行并刷新
		F:可以直接操作文件
			问题：哪些流可以直接操作文件呢?
			看API，如果其构造方法能够同时接收File和String类型的参数，一般都是可以直接操作文件的
	(3)复制文本文件
		BufferedReader br = new BufferedReader(new FileReader("a.txt"));
		PrintWriter pw = new PrintWriter(new FileWriter("b.txt"),true);
		
		String line = null;
		while((line=br.readLine())!=null) {
			pw.println(line);
		}
		
		pw.close();
		br.close();
				
4:标准输入输出流(理解)
	(1)System类下面有这样的两个字段
		in 标准输入流 public static final InputStream in;
		out 标准输出流	public static final PrintStream out;
	(2)三种键盘录入方式
		A:main方法的args接收参数
		B:System.in通过BufferedReader进行包装
			BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		C:Scanner
			Scanner sc = new Scanner(System.in);
	(3)输出语句的原理和如何使用字符流输出数据
		A:原理
			System.out.println("helloworld");
						=
			PrintStream ps = System.out;
			ps.println("helloworld");
		B:把System.out用字符缓冲流包装一下使用
			BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));

5：随机访问流(理解) RandomAccessFile
	(1)可以按照文件指针的位置写数据和读数据。
		不属于流，是Object子类，融合了InputStream，OutputStream功能。
	(2)案例：
		A:写数据
		B:读数据
		C:获取和改变文件指针的位置

6:合并流(理解) SequenceInputStream
	(1)把多个输入流的数据写到一个输出流中。
		只有输入功能，没有输出功能
	(2)构造方法：
		A:SequenceInputStream(InputStream s1, InputStream s2) 
		B:SequenceInputStream(Enumeration<? extends InputStream> e) 

7:Properties(理解)
	(1)是一个集合类，Hashtable的子类
	(2)特有功能
		A:public Object setProperty(String key,String value)
		B:public String getProperty(String key)
		C:public Set<String> stringPropertyNames()
	(3)和IO流结合的方法
		把键值对形式的文本文件内容加载到集合中
		public void load(Reader reader)
		public void load(InputStream inStream)

		把集合中的数据存储到文本文件中
		public void store(Writer writer,String comments)
		public void store(OutputStream out,String comments)
	(4)案例：
		A:根据给定的文件判断是否有键为"lisi"的，如果有就修改其值为100
		B:写一个程序实现控制猜数字小游戏程序不能玩超过5次

8:NIO(了解)
	(1)JDK4出现的NIO，对以前的IO操作进行了优化，提供了效率。但是大部分我们看到的还是以前的IO
	(2)JDK7的NIO的使用	
		Path:路径
		Paths:通过静态方法返回一个路径
		Files:提供了常见的功能
			复制文本文件
			把集合中的数据写到文本文件	