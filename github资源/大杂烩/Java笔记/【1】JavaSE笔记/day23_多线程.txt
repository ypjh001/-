一、多线程：一个应用程序有多条执行路径
	进程：正在执行的应用程序
	多进程：在一个时间段执行多个进程
	线程：进程的执行单元，执行路径
	单线程：一个应用程序只有一条执行路径
	多线程：一个应用程序有多条执行路径
		
	多进程的意义?
		提高CPU的使用率
	多线程的意义?
		提高应用程序的使用率，
		多个进程抢夺CPU资源，而某个进程如果线程比较多，就有更大机会抢到执行权
		线程的执行具有随机性，多线程的进程不保证一定能抢到资源。
		
	并行：逻辑上同时发生，指在某个时间内同时运行多个程序。
	并发：物理上同时发生，指在某个时间点同时运行多个程序。
	
二、Java程序的运行原理及JVM的启动是多线程的吗?
	运行原理：Java命令启动JVM，JVM就相当于一个进程
			JVM创建一个主线程，调用main方法
	是多线程的：因为在创建主线程调用main方法时，至少还要启动垃圾回收线程
				不然很容易出现内存溢出问题。
	
三、实现多线程程序：
	Java中不能直接进行系统调用功能，所以不能直接实现多线程。
	但是c/c++中有写好的程序来实现多线程程序，Java封装好我们直接调用就可以。
	
	A:继承Thread类
	B:实现Runnable接口
	
	两种的区别：
	实现Runnable接口好处：
		a:可以避免Java单继承的局限性
		b:适合多个相同程序代码去处理同一个资源，把线程和程序的代码区别开
		  提现面向对象设计原则。
	
四、线程的调度和优先级问题
	A:线程的调度
		a:分时调度
			线程所占用时间片平均分配
		b:抢占式调度 (Java采用的是该调度方式)
			优先级高的线程使用CPU，如果优先级相同则随机。
			获取的CPU时间片多一些。
		线程优先级高仅仅表示获取时间片的几率高，不是一定的。	
	B:获取和设置线程优先级、
		public final int getPriority(); 返回线程对象优先级
		public final void setPriority(int newPriority); 更改线程优先级
		
		a:默认是5
		b:范围是1-10	
		
五、线程的控制(常见方法)
	A:休眠线程
		public static void sleep(long millis);//毫秒值
		注意：需要try-catch异常。
		作用：给其它线程执行机会的最佳方式。
	B:加入线程
		public static void join(); // 等待该线程中止
		调用join方法的线程执行完毕，其他线程才可以执行。
		当前线程阻塞，但不释放对象锁。
	C:礼让线程
		public static void yield(); // 暂停当前正在执行的线程对象，执行其他线程
		让多个线程执行更加和谐，但是不能保证一个线程执行一次。
		yield()不会导致阻塞。
	D:后台线程
		public final void setDaemom(boolean on); //标记为后台线程(守护线程)
		当正在运行的线程全是后台线程是，Java虚拟机退出，必须在线程启动前调用。
		后台线程再其他线程运行完不会立即关闭，而是运行数次后停止。
	E:终止线程(掌握)		
		public final void stop(); //已过时，中断线程后程序结束后面代码不再执行
		public void interrupt(); //中断线程，把线程状态中止，抛出一个InterruptedException。
			
六、线程的生命周期(参照	线程生命周期图解.bmp)
	A:新建
		创建线程对象
	B:就绪
		有执行资格，没有执行权
	C:运行
		有执行资格，也有执行权
	D:阻塞
		因为一些操作使线程处于阻塞状态，即既没执行资格，又没执行权
		而另外一些操作可以将它激活，使之变成就绪状态
	E:死亡	
		线程对象变成垃圾，等待被回收
					yield()
					时间片用完     中断线程	
	新建------>就绪<---------->运行-------->死亡
		start()	|  获取到时间片	 | run()结束
				|				 |
                |sleep()时间到   |sleep()
				|notify()		 |wait()
				<-------<------阻塞	

七、电影院卖票程序出问题
		A:为了更符合真实的场景，加入了休眠100毫秒。
		B:卖票问题
			a:同票多次
				CPU一次操作的原子性
			b:负数票
				随机性和延迟

八、多线程安全问题的原因(也是我们以后判断一个程序是否有线程安全问题的依据)
		A:是否有多线程环境
		B:是否有共享数据
		C:是否有多条语句操作共享数据				
	