一、AJAX
1.1 ajax简介
	* ajax，asynchronous JavaScript and xml，异步的js和xml
	* 能使用js异步访问服务器
	* 服务器给客户端响应的是数据，局部刷新
	数据：xml或json
1.2 同步交互和异步交互
	同步：一次请求响应后才能发第二个请求
		  刷新的是整个页面
	异步：发第一个请求后，无需服务器响应就可以发第二个请求
		  js局部刷新
1.3 ajax应用场景
	* 百度搜索关键字框
	* 用户注册时校验表单
1.4 ajax优缺点
	- 优点
		* 增强用户体验
		* 局部刷新，只需响应部分内容数据，减轻服务器压力
	- 缺点
		* ajax不能应用在所有场景
		* 增加服务器访问次数
1.5 ajax的四步操作
	1)创建XMLHttpRequest对象
		* 大部分浏览器：var xmlHttp = new XMLHttpRequest();
		* IE6.0：var xmlHttp = new ActiveXObject("Msxml2.XMLHTTP");
		* IE5.5及之前：var xmlHttp = new ActiveXObject("Microsoft.XMLHTTP");
		代码：
		function createXMLHttpRequest(){
			try{
				var xmlHttp = new XMLHttpRequest();
			}catch(e){
				try{
					var xmlHttp = new ActiveXObject("Msxml2.XMLHTTP");
				}catch(e){
					try{
						var xmlHttp = new ActiveXObject("Microsoft.XMLHTTP");
					}catch(e){
						alert("什么浏览器？");
						throw e;
					}
				}
			}
		}
	2)打开连接
		xmlHttp.open("GET","/WEB23_AJAX/AServlet",true)
		* 请求方式：get或post
		* 请求地址：指定服务器端资源
		* 是否使用异步：true为异步，false为同步
	3)发送请求
		xmlHttp.send(null);
		参数：请求体内容，如果是GET，必须给出null
	4)获取服务器响应数据
		* xmlHttp注册监听器：onreadystatechange
		* xmlHttp对象有五个状态：
			0：刚刚创建，还没有打开连接即调用open方法
			1：打开连接，但是还没有发生请求，即send
			2：发送请求了
			3：知道服务器开始响应了
			4：服务器响应结束
		* 获取状态
			var state = xmlHttp.readyState;
		* 获取状态码
			var status = xmlHttp.status;//200,404,500
		* 获取响应数据
			var content = xmlHttp.responseText;//得到text文本中的内容
			var content = xmlHttp.responseXML;//得到xml响应内容，为document对象 

二、案例
2.1 helloword小案例
2.2 发送Post请求案例
	三处改动
	* xmlHttp.open("POST",...);//GET改为POST
	* xmlHttp.setRequestHeader("Content-Type","application/x-www-form-urlencoded");//添加请求头
	* xmlHttp.send("uname=张三");//send中添加参数
2.3 验证用户名是否被注册
	* ajax3.jsp
		- 创建注册表单
		- 为用户名添加onblur事件，失去焦点
		- 获取文本框信息，通过ajax发送给服务器，得到响应结果
			如果为1，在文本框后显示用户已被注册
			如果为0，什么都不做
	* Servlet
		- 验证表单用户名
		- 获取用户名参数
		- 判断是否为admin
			是返回1
			不是返回0
2.4 使用responseXML获取响应内容(太麻烦了！)
	* Servlet
		- 设置响应头：ContentType("text/xml;charset=utf-8");
	* jsp
		var doc = xmlHttp.responseXML;
	具体看WEB23/CServlet和ajax4.jsp
2.5 省市联动
	* jsp
		- 第一步，页面加载即向省份中添加选项
		** 使用ajax向ProvinceServlet中获取所有省份的文本
		** 根据文本保存成集合，遍历集合，向province选择框下添加option选项
		- 第二步，用户选择省份，获取对应的市
		** 使用ajaxPost方法传递省份参数，获取对应的xml对象
		** 清空city选择框下的所有option标签
		** 遍历市xml
		** 市select下添加option元素
	* Servlet
		两个Servlet
		- 一个获取所有的省
		** 解析xml文件
		** 获取所有province属性值
		** 用StringBuilder加逗号连接
		** 响应给客户端
		- 一个获取所有的市
		** 解析xml文件
		** 获取省参数
		** 根据省参数查找xml中province标签
		** 获取province
		** 转成字符串响应

三、XStream
	* 把javaBean转换成xml
	* jar包：核心JAR包：xstream-1.4.7.jar；
			 必须依赖包：xpp3_min-1.1.4c（XML Pull Parser，一款速度很快的XML解析器）
	* 使用步骤：
		- XStream xstream = new XStream()
		- String xmlStr = xstream.toXML(javabean);
	* 细节方法
		* 标签更改名称
			xStream.adias("china",List.class);
		* 使标签成为父标签属性
			xstream.useAttributeFor(Province.class, "name")
		* 去除Collection类型的类名，只需要内容
			xstream.addImplicitCollection(Province.class, "cities")
		* 去除指定名，使其不生成xml元素
			xstream.omitField(City.class, "description")

四、json
4.1 json简介
	json是数据交换格式
	语法：{}为一个对象，属性名必须使用双引号括起来
		var person = {"name":"zhangSan", "age":18, "sex":"male"};
		> 属性值：
		* null
		* 数值
		* 字符串
		* 数组：使用[]括起来
		* boolean值：true和false
4.2 json和xml
	可读性：xml优
	解析难度：json简单
	流行度：json越来越受欢迎
4.3 json-lib
	将javabean类转换成json串
	核心类
	  * JSONObject --> Map
		> toString();
		> JSONObject map = JSONObject.fromObject(person)：把对象转换成JSONObject对象
	  * JSONArray --> List
		> toString()
		> JSONArray jsonArray = JSONArray.fromObject(list)：把list转换成JSONArray对象

		