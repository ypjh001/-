<?xml version="1.0" encoding="UTF-8"?>
<opml version="2.0">
  <head>
    <title></title>
    <dateModified></dateModified>
    <ownerName></ownerName>
  </head>
  <body>
<outline text="Spring Cloud Alibaba 微服工具集" _note="**版本: 2.2.1**">
  <outline text="1.简介" _note="Spring Cloud Alibaba provides a one-stop solution for distributed&#10;application development. It contains all the components required to&#10;develop distributed applications, making it easy for you to develop your&#10;applications using Spring Cloud.&#10;&#10;With Spring Cloud Alibaba, you only need to add some annotations and a&#10;small amount of configurations to connect Spring Cloud applications to&#10;the distributed solutions of Alibaba, and build a distributed&#10;application system with Alibaba middleware.&#10;&#10;    # 0.原文翻译&#10;    - https://spring.io/projects/spring-cloud-alibaba&#10;    - 阿里云为分布式应用开发提供了一站式解决方案。它包含了开发分布式应用程序所需的所有组件，使您可以轻松地使用springcloud开发应用程序。&#10;    - 有了阿里云，你只需要添加一些注解和少量的配置，就可以将Spring云应用连接到阿里的分布式解决方案上，用阿里中间件搭建一个分布式应用系统。">
  </outline>
  <outline text="2.环境搭建" _note="    # 0.构建项目并引入依赖&#10;&#10;    &lt;!--定义springcloud版本--&gt;&#10;    &lt;properties&gt;&#10;      &lt;spring.cloud.alibaba.version&gt;2.2.1.RELEASE&lt;/spring.cloud.alibaba.version&gt;&#10;    &lt;/properties&gt;&#10;&#10;    &lt;!--全局引入springcloudalibaba下载依赖地址,并不会引入依赖--&gt;&#10;    &lt;dependencyManagement&gt;&#10;      &lt;dependencies&gt;&#10;        &lt;dependency&gt;&#10;          &lt;groupId&gt;com.alibaba.cloud&lt;/groupId&gt;&#10;          &lt;artifactId&gt;spring-cloud-alibaba-dependencies&lt;/artifactId&gt;&#10;          &lt;version&gt;${spring.cloud.alibaba.version}&lt;/version&gt;&#10;          &lt;type&gt;pom&lt;/type&gt;&#10;          &lt;scope&gt;import&lt;/scope&gt;&#10;        &lt;/dependency&gt;&#10;      &lt;/dependencies&gt;&#10;    &lt;/dependencyManagement&gt;&#10;&#10;![](C:\Users\Administrator\Downloads\一些文档\springcloud资料\springcloud资料\笔记(含alibaba笔记)\Spring Cloud Alibaba.assets\image-20200727201703247.png)&#10;&#10;![](C:\Users\Administrator\Downloads\一些文档\springcloud资料\springcloud资料\笔记(含alibaba笔记)\Spring Cloud Alibaba.assets\image-20200727201715844.png)&#10;&#10;------------------------------------------------------------------------">
  </outline>
  <outline text="3.Nacos">
    <outline text="什么是Nacos Name Service &amp;amp; Configurations Services" _note="![](C:\Users\Administrator\Downloads\一些文档\springcloud资料\springcloud资料\笔记(含alibaba笔记)\Spring Cloud Alibaba.assets\image-20200727202422243.png)&#10;&#10;    - https://nacos.io/zh-cn/index.html&#10;    - Nacos 致力于帮助您发现、配置和管理微服务。Nacos 提供了一组简单易用的特性集，帮助您快速实现动态服务发现、服务配置、服务元数据及流量管理。&#10;&#10;-   总结:**Nacos就是微服务架构中服务注册中心以及统一配置中心,用来替换原来的(eureka,consul)以及config组件**">
    </outline>
    <outline text="安装Nacos" _note="    # 0.准备环境&#10;    - 1.64 bit OS，支持 Linux/Unix/Mac/Windows，推荐选用 Linux/Unix/Mac。&#10;    - 2.64 bit JDK 1.8+；下载 &amp; 配置。&#10;    - 3.Maven 3.2.x+；下载 &amp; 配置。&#10;&#10;    # 1.下载nacos [本次课程版本:][1.3.0版本]&#10;    - https://github.com/alibaba/nacos/releases &#10;&#10;![](C:\Users\Administrator\Downloads\一些文档\springcloud资料\springcloud资料\笔记(含alibaba笔记)\Spring Cloud Alibaba.assets\image-20200727202936158.png)&#10;&#10;    # 2.解压缩安装包到指定位置&#10;    - bin  			启动nacos服务的脚本目录&#10;    - conf 			nacos的配置文件目录&#10;    - target 		nacos的启动依赖存放目录&#10;    - data		  nacos启动成功后保存数据的目录&#10;&#10;![](C:\Users\Administrator\Downloads\一些文档\springcloud资料\springcloud资料\笔记(含alibaba笔记)\Spring Cloud Alibaba.assets\image-20200727203852405.png)&#10;&#10;    # 3.启动安装服务&#10;    - linux/unix/mac启动&#10;    	打开终端进入nacos的bin目录执行如下命令 &#10;    	./startup.sh -m standalone&#10;&#10;    - windows启动&#10;    	在 cmd中 &#10;    	执行 startup.cmd -m standalone 或者双击startup.cmd运行文件。&#10;&#10;![](C:\Users\Administrator\Downloads\一些文档\springcloud资料\springcloud资料\笔记(含alibaba笔记)\Spring Cloud Alibaba.assets\image-20200727204207794.png)&#10;&#10;    # 4.访问nacos的web服务管理界面&#10;    - http://localhost:8848/nacos/&#10;    - 用户名 和 密码都是nacos&#10;&#10;![](C:\Users\Administrator\Downloads\一些文档\springcloud资料\springcloud资料\笔记(含alibaba笔记)\Spring Cloud Alibaba.assets\image-20200727210727986.png)">
    </outline>
    <outline text="开发服务注册到nacos" _note="    # 0.创建项目并引入依赖&#10;&#10;    &lt;!--引入nacos client的依赖--&gt;&#10;    &lt;dependency&gt;&#10;        &lt;groupId&gt;com.alibaba.cloud&lt;/groupId&gt;&#10;        &lt;artifactId&gt;spring-cloud-starter-alibaba-nacos-discovery&lt;/artifactId&gt;&#10;    &lt;/dependency&gt;&#10;&#10;![](C:\Users\Administrator\Downloads\一些文档\springcloud资料\springcloud资料\笔记(含alibaba笔记)\Spring Cloud Alibaba.assets\image-20200727212459690.png)&#10;&#10;    # 1.配置注册地址&#10;&#10;    server.port=8789 																												#指定当前服务端口&#10;    spring.application.name=nacosclient																			#指定服务名称&#10;    spring.cloud.nacos.server-addr=localhost:8848														#指定nacos服务地址&#10;    spring.cloud.nacos.discovery.server-addr=${spring.cloud.nacos.server-addr} #指定注册中心地址							&#10;    management.endpoints.web.exposure.include=*														  #暴露所有web端点&#10;&#10;    # 2.加入启动服务注册注解 [注意:][新版本之后这步可以省略不写]&#10;&#10;![](C:\Users\Administrator\Downloads\一些文档\springcloud资料\springcloud资料\笔记(含alibaba笔记)\Spring Cloud Alibaba.assets\image-20200727213320726.png)&#10;&#10;    # 3.查看nacos的服务列表&#10;&#10;![](C:\Users\Administrator\Downloads\一些文档\springcloud资料\springcloud资料\笔记(含alibaba笔记)\Spring Cloud Alibaba.assets\image-20200727213221604.png)">
    </outline>
    <outline text="使用nacos作为配置中心">
      <outline text="1.从nacos获取配置" _note="    # 1.创建项目并引入nacons配置中心依赖&#10;&#10;    &lt;!--引入nacos client依赖--&gt;&#10;    &lt;dependency&gt;&#10;      &lt;groupId&gt;com.alibaba.cloud&lt;/groupId&gt;&#10;      &lt;artifactId&gt;spring-cloud-starter-alibaba-nacos-discovery&lt;/artifactId&gt;&#10;    &lt;/dependency&gt;&#10;&#10;    &lt;!--引入nacos config 依赖--&gt;&#10;    &lt;dependency&gt;&#10;      &lt;groupId&gt;com.alibaba.cloud&lt;/groupId&gt;&#10;      &lt;artifactId&gt;spring-cloud-starter-alibaba-nacos-config&lt;/artifactId&gt;&#10;    &lt;/dependency&gt;&#10;&#10;![](C:\Users\Administrator\Downloads\一些文档\springcloud资料\springcloud资料\笔记(含alibaba笔记)\Spring Cloud Alibaba.assets\image-20200728203807174.png)&#10;&#10;    # 2.配置配置中心地址&#10;&#10;    spring.cloud.nacos.server-addr=localhost:8848								# 远程配置中心的地址&#10;    spring.cloud.nacos.config.group=DEFAULT_GROUP								# 读取配置的分组&#10;    spring.cloud.nacos.config.file-extension=properties					# 指定读取文件后缀&#10;    spring.application.name=config															# 指定读取文件的前缀&#10;    spring.profiles.active=prod																	# 指定读取文件的具体环境&#10;&#10;![](C:\Users\Administrator\Downloads\一些文档\springcloud资料\springcloud资料\笔记(含alibaba笔记)\Spring Cloud Alibaba.assets\image-20200728211501591.png)&#10;&#10;    # 3.在nacos中创建配置&#10;&#10;![](C:\Users\Administrator\Downloads\一些文档\springcloud资料\springcloud资料\笔记(含alibaba笔记)\Spring Cloud Alibaba.assets\image-20200728211633327.png)&#10;&#10;![](C:\Users\Administrator\Downloads\一些文档\springcloud资料\springcloud资料\笔记(含alibaba笔记)\Spring Cloud Alibaba.assets\image-20200728211924796.png)&#10;&#10;    # 4.编写控制器测试配置读取情况&#10;&#10;    @RestController&#10;    @Slf4j&#10;    public class HelloController {&#10;        //注入配置&#10;        @Value(&quot;${user.name}&quot;)&#10;        private String username;&#10;        @GetMapping(&quot;/hello/config&quot;)&#10;        public String config(){&#10;            log.info(&quot;用户名: [{}]&quot;,username);&#10;            return username;&#10;        }&#10;    }&#10;&#10;![](C:\Users\Administrator\Downloads\一些文档\springcloud资料\springcloud资料\笔记(含alibaba笔记)\Spring Cloud Alibaba.assets\image-20200728212037358.png)&#10;&#10;    # 5.启动项目方式测试配置读取&#10;&#10;![](C:\Users\Administrator\Downloads\一些文档\springcloud资料\springcloud资料\笔记(含alibaba笔记)\Spring Cloud Alibaba.assets\image-20200728212221271.png)&#10;&#10;![](C:\Users\Administrator\Downloads\一些文档\springcloud资料\springcloud资料\笔记(含alibaba笔记)\Spring Cloud Alibaba.assets\image-20200728212249215.png)">
      </outline>
      <outline text="2. DataId" _note="    # 1.DataId&#10;    - 用来读取远程配置中心的中具体配置文件其完整格式如下:&#10;    - ${prefix}-${spring.profile.active}.${file-extension}&#10;    	a. prefix 默认为 spring.application.name 的值，也可以通过配置项 spring.cloud.nacos.config.prefix来配置。&#10;    	&#10;    	b. spring.profile.active 即为当前环境对应的 profile，详情可以参考 Spring Boot文档。 注意：当 spring.profile.active 为空时，对应的连接符 - 也将不存在，dataId 的拼接格式变成 ${prefix}.${file-extension}&#10;    	&#10;    	c. file-exetension 为配置内容的数据格式，可以通过配置项 spring.cloud.nacos.config.file-extension 来配置。目前只支持 properties 和 yaml 类型。">
      </outline>
      <outline text="3.实现自动配置刷新" _note="    # 1.自动刷新&#10;    - 默认情况下nacos已经实现了自动配置刷新功能,如果需要刷新配置直接在控制器中加入@RefreshScope注解即可&#10;&#10;    @RestController&#10;    @Slf4j&#10;    @RefreshScope&#10;    public class HelloController {&#10;        //注入配置&#10;        @Value(&quot;${user.name}&quot;)&#10;        private String username;&#10;        @GetMapping(&quot;/hello/config&quot;)&#10;        public String config(){&#10;            log.info(&quot;用户名: [{}]&quot;,username);&#10;            return username;&#10;        }&#10;    }&#10;&#10;![](C:\Users\Administrator\Downloads\一些文档\springcloud资料\springcloud资料\笔记(含alibaba笔记)\Spring Cloud Alibaba.assets\image-20200728215747497.png)">
      </outline>
      <outline text="4.命名空间" _note="    # 1.命名空间(namespace)&#10;    - https://github.com/alibaba/spring-cloud-alibaba/wiki/Nacos-config&#10;    - namespace命名空间是nacos针对于企业级开发设计用来针对于不同环境的区分,比如正在企业开发时有测试环境,生产环境,等其他环境,因此为了保证不同环境配置实现隔离,提出了namespace的概念,默认在nacos中存在一个public命名空间所有配置在没有指定命名空间时都在这个命名空间中获取配置,在实际开发时可以针对于不能环境创建不同的namespace空间。默认空间不能删除!&#10;&#10;![](C:\Users\Administrator\Downloads\一些文档\springcloud资料\springcloud资料\笔记(含alibaba笔记)\Spring Cloud Alibaba.assets\image-20200728220906225.png)&#10;&#10;    # 2.创建其他命名空间&#10;    - 每个命名空间都有一个唯一id,这个id是读取配置时指定空间的唯一标识&#10;&#10;![](C:\Users\Administrator\Downloads\一些文档\springcloud资料\springcloud资料\笔记(含alibaba笔记)\Spring Cloud Alibaba.assets\image-20200728221059584.png)&#10;&#10;![](C:\Users\Administrator\Downloads\一些文档\springcloud资料\springcloud资料\笔记(含alibaba笔记)\Spring Cloud Alibaba.assets\image-20200728221139206.png)&#10;&#10;    # 3.在配置列表查看空间&#10;&#10;![](C:\Users\Administrator\Downloads\一些文档\springcloud资料\springcloud资料\笔记(含alibaba笔记)\Spring Cloud Alibaba.assets\image-20200728221221582.png)&#10;&#10;    # 4.在指定空间下载创建配置文件&#10;&#10;![](C:\Users\Administrator\Downloads\一些文档\springcloud资料\springcloud资料\笔记(含alibaba笔记)\Spring Cloud Alibaba.assets\image-20200728222410336.png)&#10;&#10;    # 5.项目中使用命名空间指定配置&#10;&#10;![](C:\Users\Administrator\Downloads\一些文档\springcloud资料\springcloud资料\笔记(含alibaba笔记)\Spring Cloud Alibaba.assets\image-20200728223100749.png)&#10;&#10;    # 6.测试配置&#10;&#10;![](C:\Users\Administrator\Downloads\一些文档\springcloud资料\springcloud资料\笔记(含alibaba笔记)\Spring Cloud Alibaba.assets\image-20200728223125420.png)">
      </outline>
      <outline text="5.配置分组" _note="    # 1.配置分组(group)&#10;    - 配置分组是对配置集进行分组，通过一个有意义的字符串（如 Buy 或 Trade ）来表示，不同的配置分组下可以有相同的配置集（Data ID）。当您在 Nacos 上创建一个配置时，如果未填写配置分组的名称，则配置分组的名称默认采用 DEFAULT_GROUP 。配置分组的常见场景：可用于区分不同的项目或应用，例如：学生管理系统的配置集可以定义一个group为：STUDENT_GROUP。&#10;&#10;![](C:\Users\Administrator\Downloads\一些文档\springcloud资料\springcloud资料\笔记(含alibaba笔记)\Spring Cloud Alibaba.assets\image-20200728223745192.png)&#10;&#10;    # 2.创建分组&#10;&#10;![](C:\Users\Administrator\Downloads\一些文档\springcloud资料\springcloud资料\笔记(含alibaba笔记)\Spring Cloud Alibaba.assets\image-20200728223921240.png)&#10;&#10;![](C:\Users\Administrator\Downloads\一些文档\springcloud资料\springcloud资料\笔记(含alibaba笔记)\Spring Cloud Alibaba.assets\image-20200728224034473.png)&#10;&#10;    # 3.读取不同分组的配置&#10;&#10;![](C:\Users\Administrator\Downloads\一些文档\springcloud资料\springcloud资料\笔记(含alibaba笔记)\Spring Cloud Alibaba.assets\image-20200728224128019.png)&#10;&#10;------------------------------------------------------------------------">
      </outline>
    </outline>
  </outline>
  <outline text="4.sentinel 流量卫兵">
    <outline text="什么是sentinel" _note="![](C:\Users\Administrator\Downloads\一些文档\springcloud资料\springcloud资料\笔记(含alibaba笔记)\Spring Cloud Alibaba.assets\image-20200730205725897.png)&#10;&#10;As microservices become popular, the stability of service calls is&#10;becoming increasingly important.&#10;[Sentinel](https://github.com/alibaba/Sentinel) takes &quot;flow&quot; as the&#10;breakthrough point, and works on multiple fields including flow control,&#10;circuit breaking and load protection to protect service reliability.&#10;---\[摘自官网\]&#10;&#10;    # 0.说明&#10;    - https://spring-cloud-alibaba-group.github.io/github-pages/hoxton/en-us/index.html#_how_to_use_sentinel&#10;    - https://github.com/alibaba/Sentinel/wiki&#10;    - 翻译:随着微服务的普及，服务调用的稳定性变得越来越重要。Sentinel以“流量”为突破口，在流量控制、断路、负载保护等多个领域进行工作，保障服务可靠性。&#10;    - 通俗:用来在微服务系统中保护微服务对的作用 如何 服务雪崩 服务熔断  服务降级 就是用来替换hystrix&#10;&#10;    # 1.特性&#10;    - 丰富的应用场景：Sentinel 承接了阿里巴巴近 10 年的双十一大促流量的核心场景，例如秒杀（即突发流量控制在系统容量可以承受的范围）、消息削峰填谷、集群流量控制、实时熔断下游不可用应用等。&#10;&#10;    - 完备的实时监控：Sentinel 同时提供实时的监控功能。您可以在控制台中看到接入应用的单台机器秒级数据，甚至 500 台以下规模的集群的汇总运行情况。&#10;&#10;    - 广泛的开源生态：Sentinel 提供开箱即用的与其它开源框架/库的整合模块，例如与 Spring Cloud、Dubbo、gRPC 的整合。您只需要引入相应的依赖并进行简单的配置即可快速地接入 Sentinel。&#10;&#10;![](C:\Users\Administrator\Downloads\一些文档\springcloud资料\springcloud资料\笔记(含alibaba笔记)\Spring Cloud Alibaba.assets\image-20200730210108995.png)">
    </outline>
    <outline text="sentinel使用" _note="    - sentinel提供了两个服务组件：&#10;    	一个是 sentinel 用来实现微服务系统中服务熔断、降级等功能。这点和hystrix 类似&#10;    	一个是 sentinel dashboard 用来监控微服务系统中流量调用等情况。这点和hystrix 类似">
      <outline text="1. sentinel dashboard的安装" _note="    # 1.下载&#10;    - https://github.com/alibaba/Sentinel/releases&#10;&#10;![](C:\Users\Administrator\Downloads\一些文档\springcloud资料\springcloud资料\笔记(含alibaba笔记)\Spring Cloud Alibaba.assets\image-20200730210627642.png)&#10;&#10;    # 2.启动&#10;    - 仪表盘是个jar包可以直接通过java命令启动 如: java -jar 方式运行 默认端口为 8080&#10;    - java -Dserver.port=9191 -jar  sentinel-dashboard-1.7.2.jar&#10;&#10;![](C:\Users\Administrator\Downloads\一些文档\springcloud资料\springcloud资料\笔记(含alibaba笔记)\Spring Cloud Alibaba.assets\image-20200730211707791.png)&#10;&#10;    # 3.访问web界面&#10;    - http://localhost:9191/#/login&#10;&#10;![](C:\Users\Administrator\Downloads\一些文档\springcloud资料\springcloud资料\笔记(含alibaba笔记)\Spring Cloud Alibaba.assets\image-20200730211812235.png)&#10;&#10;    # 4.登录&#10;    - 用户名&amp;密码: sentinel&#10;&#10;![](C:\Users\Administrator\Downloads\一些文档\springcloud资料\springcloud资料\笔记(含alibaba笔记)\Spring Cloud Alibaba.assets\image-20200730212001214.png)">
      </outline>
      <outline text="2.sentinel 实时监控服务" _note="    # 1.创建项目引入依赖&#10;&#10;    &lt;!--引入nacos client依赖--&gt;&#10;    &lt;dependency&gt;&#10;      &lt;groupId&gt;com.alibaba.cloud&lt;/groupId&gt;&#10;      &lt;artifactId&gt;spring-cloud-starter-alibaba-nacos-discovery&lt;/artifactId&gt;&#10;    &lt;/dependency&gt;&#10;&#10;    &lt;!--引入sentinel依赖--&gt;&#10;    &lt;dependency&gt;&#10;        &lt;groupId&gt;com.alibaba.cloud&lt;/groupId&gt;&#10;        &lt;artifactId&gt;spring-cloud-starter-alibaba-sentinel&lt;/artifactId&gt;&#10;    &lt;/dependency&gt;&#10;&#10;![](C:\Users\Administrator\Downloads\一些文档\springcloud资料\springcloud资料\笔记(含alibaba笔记)\Spring Cloud Alibaba.assets\image-20200730213841674.png)&#10;&#10;    # 2.配置&#10;&#10;    server.port=8789&#10;    spring.application.name=nacosclient&#10;    spring.cloud.nacos.server-addr=localhost:8848&#10;    spring.cloud.nacos.discovery.server-addr=${spring.cloud.nacos.server-addr}&#10;&#10;    spring.cloud.sentinel.enabled=true											 # 开启sentinel 默认开启&#10;    spring.cloud.sentinel.transport.dashboard=localhost:9191 # 连接dashboard&#10;    spring.cloud.sentinel.transport.port=8719								 # 与dashboard通信的端口&#10;&#10;![](C:\Users\Administrator\Downloads\一些文档\springcloud资料\springcloud资料\笔记(含alibaba笔记)\Spring Cloud Alibaba.assets\image-20200730214440292.png)&#10;&#10;    # 3.启动服务&#10;&#10;![](C:\Users\Administrator\Downloads\一些文档\springcloud资料\springcloud资料\笔记(含alibaba笔记)\Spring Cloud Alibaba.assets\image-20200730214911616.png)&#10;&#10;    # 4.访问dashboard界面查看服务监控&#10;    - 发现界面什么都没有? &#10;    - 默认情况下sentiel为延迟加载,不会在启动之后立即创建服务监控,需要对服务进行调用时才会初始化&#10;&#10;![](C:\Users\Administrator\Downloads\一些文档\springcloud资料\springcloud资料\笔记(含alibaba笔记)\Spring Cloud Alibaba.assets\image-20200730215003082.png)&#10;&#10;    # 5.开发服务&#10;&#10;    @RestController&#10;    @Slf4j&#10;    public class SentinelController {&#10;        @GetMapping(&quot;/sentinel/test&quot;)&#10;        public String test(){&#10;            log.info(&quot;sentinel test&quot;);&#10;            return &quot;sentinel test &quot;;&#10;        }&#10;&#10;        @GetMapping(&quot;/sentinel/test1&quot;)&#10;        public String test1(){&#10;            log.info(&quot;sentinel test1&quot;);&#10;            return &quot;sentinel test1 &quot;;&#10;        }&#10;    }&#10;&#10;![](C:\Users\Administrator\Downloads\一些文档\springcloud资料\springcloud资料\笔记(含alibaba笔记)\Spring Cloud Alibaba.assets\image-20200730215202043.png)&#10;&#10;    # 6.启动进行调用&#10;    - http://localhost:8789/sentinel/test&#10;&#10;![](C:\Users\Administrator\Downloads\一些文档\springcloud资料\springcloud资料\笔记(含alibaba笔记)\Spring Cloud Alibaba.assets\image-20200730215227292.png)&#10;&#10;    # 7.查看监控界面&#10;&#10;![](C:\Users\Administrator\Downloads\一些文档\springcloud资料\springcloud资料\笔记(含alibaba笔记)\Spring Cloud Alibaba.assets\image-20200730215420417.png)">
      </outline>
      <outline text="3.sentinel 流量控制" _note="    # 0.说明&#10;    - 流量控制（flow control），其原理是监控应用流量的 QPS 或并发线程数等指标，当达到指定的阈值时对流量进行控制，以避免被瞬时的流量高峰冲垮，从而保障应用的高可用性。&#10;&#10;    - 同一个资源可以创建多条限流规则。FlowSlot 会对该资源的所有限流规则依次遍历，直到有规则触发限流或者所有规则遍历完毕。&#10;&#10;    - 一条限流规则主要由下面几个因素组成，我们可以组合这些元素来实现不同的限流效果：&#10;    	resource：资源名，即限流规则的作用对象&#10;    	count: 限流阈值&#10;    	grade: 限流阈值类型（QPS 或并发线程数）&#10;    	limitApp: 流控针对的调用来源，若为 default 则不区分调用来源&#10;    	strategy: 调用关系限流策略&#10;    	controlBehavior: 流量控制效果（直接拒绝、Warm Up、匀速排队）&#10;&#10;    - 流量控制主要有两种统计类型，一种是统计并发线程数，另外一种则是统计 QPS&#10;    - 更多细节参见官网:https://github.com/alibaba/Sentinel/wiki/%E6%B5%81%E9%87%8F%E6%8E%A7%E5%88%B6">
        <outline text="QPS限流" _note="    # 1.配置QPS流量控制&#10;&#10;![](C:\Users\Administrator\Downloads\一些文档\springcloud资料\springcloud资料\笔记(含alibaba笔记)\Spring Cloud Alibaba.assets\image-20200730220822573.png)&#10;&#10;![](C:\Users\Administrator\Downloads\一些文档\springcloud资料\springcloud资料\笔记(含alibaba笔记)\Spring Cloud Alibaba.assets\image-20200730220846876.png)&#10;&#10;    # 2.测试&#10;    - 每秒只能最大接收1个请求,超过1个报错&#10;&#10;![](C:\Users\Administrator\Downloads\一些文档\springcloud资料\springcloud资料\笔记(含alibaba笔记)\Spring Cloud Alibaba.assets\image-20200730220950595.png)">
        </outline>
        <outline text="线程数限流" _note="    # 1.配置线程数限流&#10;&#10;![](C:\Users\Administrator\Downloads\一些文档\springcloud资料\springcloud资料\笔记(含alibaba笔记)\Spring Cloud Alibaba.assets\image-20200730223510370.png)&#10;&#10;    # 2.访问测试&#10;&#10;![](C:\Users\Administrator\Downloads\一些文档\springcloud资料\springcloud资料\笔记(含alibaba笔记)\Spring Cloud Alibaba.assets\image-20200730224844222.png)">
        </outline>
        <outline text="流控模式" _note="    # 1.说明&#10;    - 直接:标识流量控制规则到达阈值直接触发流量控制&#10;    - 关联: 当两个资源之间具有资源争抢或者依赖关系的时候，这两个资源便具有了关联。比如对数据库同一个字段的读操作和写操作存在争抢，读的速度过高会影响写得速度，写的速度过高会影响读的速度。如果放任读写操作争抢资源，则争抢本身带来的开销会降低整体的吞吐量。可使用关联限流来避免具有关联关系的资源之间过度的争抢，举例来说，read_db 和 write_db 这两个资源分别代表数据库读写，我们可以给 read_db 设置限流规则来达到写优先的目的：设置 strategy 为 RuleConstant.STRATEGY_RELATE 同时设置 refResource 为 write_db。这样当写库操作过于频繁时，读数据的请求会被限流。&#10;&#10;![](C:\Users\Administrator\Downloads\一些文档\springcloud资料\springcloud资料\笔记(含alibaba笔记)\Spring Cloud Alibaba.assets\image-20200801195347534.png)&#10;&#10;    - 链路限流: https://github.com/alibaba/Sentinel/wiki/%E6%B5%81%E9%87%8F%E6%8E%A7%E5%88%B6">
        </outline>
        <outline text="流控效果" _note="    - 直接拒绝:（RuleConstant.CONTROL_BEHAVIOR_DEFAULT）方式是默认的流量控制方式，当QPS超过任意规则的阈值后，新的请求就会被立即拒绝，拒绝方式为抛出FlowException。&#10;&#10;    - Warm Up:（RuleConstant.CONTROL_BEHAVIOR_WARM_UP）方式，即预热/冷启动方式。当系统长期处于低水位的情况下，当流量突然增加时，直接把系统拉升到高水位可能瞬间把系统压垮。通过&quot;冷启动&quot;，让通过的流量缓慢增加，在一定时间内逐渐增加到阈值上限，给冷系统一个预热的时间，避免冷系统被压垮。&#10;    	更多:https://github.com/alibaba/Sentinel/wiki/%E9%99%90%E6%B5%81---%E5%86%B7%E5%90%AF%E5%8A%A8&#10;    	&#10;    	&#10;    - 匀速排队:(RuleConstant.CONTROL_BEHAVIOR_RATE_LIMITER）方式会严格控制请求通过的间隔时间，也即是让请求以均匀的速度通过，对应的是漏桶算法。 只能对请求进行排队等待&#10;    	更多:https://github.com/alibaba/Sentinel/wiki/%E6%B5%81%E9%87%8F%E6%8E%A7%E5%88%B6-%E5%8C%80%E9%80%9F%E6%8E%92%E9%98%9F%E6%A8%A1%E5%BC%8F&#10;&#10;------------------------------------------------------------------------">
        </outline>
      </outline>
      <outline text="4.熔断降级" _note="    # 0.说明&#10;    - https://github.com/alibaba/Sentinel/wiki/%E7%86%94%E6%96%AD%E9%99%8D%E7%BA%A7&#10;    - 除了流量控制以外，对调用链路中不稳定的资源进行熔断降级也是保障高可用的重要措施之一。由于调用关系的复杂性，如果调用链路中的某个资源不稳定，最终会导致请求发生堆积。Sentinel **熔断降级**会在调用链路中某个资源出现不稳定状态时（例如调用超时或异常比例升高），对这个资源的调用进行限制，让请求快速失败，避免影响到其它的资源而导致级联错误。当资源被降级后，在接下来的降级时间窗口之内，对该资源的调用都自动熔断（默认行为是抛出 `DegradeException`）。">
        <outline text="降级策略" _note="-   平均响应时间 (DEGRADE*GRADE*RT)：当 1s 内持续进入 N&#10;    个请求，对应时刻的平均响应时间（秒级）均超过阈值（count，以 ms&#10;    为单位），那么在接下的时间窗口（DegradeRule 中的 timeWindow，以 s&#10;    为单位）之内，对这个方法的调用都会自动地熔断（抛出&#10;    DegradeException）。注意 Sentinel 默认统计的 RT 上限是 4900&#10;    ms，超出此阈值的都会算作 4900 ms，若需要变更此上限可以通过启动配置项&#10;    -Dcsp.sentinel.statistic.max.rt=xxx 来配置。&#10;&#10;![](C:\Users\Administrator\Downloads\一些文档\springcloud资料\springcloud资料\笔记(含alibaba笔记)\Spring Cloud Alibaba.assets\image-20200802142932522.png)&#10;&#10;-   异常比例 (DEGRADE*GRADE*EXCEPTION\_RATIO)：当资源的每秒请求量 &amp;gt;=&#10;    N（可配置），并且每秒异常总数占通过量的比值超过阈值（DegradeRule&#10;    中的 count）之后，资源进入降级状态，即在接下的时间窗口（DegradeRule&#10;    中的 timeWindow，以 s&#10;    为单位）之内，对这个方法的调用都会自动地返回。异常比率的阈值范围是&#10;    \[0.0, 1.0\]，代表 0% - 100%。&#10;&#10;![](C:\Users\Administrator\Downloads\一些文档\springcloud资料\springcloud资料\笔记(含alibaba笔记)\Spring Cloud Alibaba.assets\image-20200802143052470.png)&#10;&#10;-   异常数 (DEGRADE*GRADE*EXCEPTION\_COUNT)：当资源近 1&#10;    分钟的异常数目超过阈值之后会进行熔断。注意由于统计时间窗口是分钟级别的，若&#10;    timeWindow 小于 60s，则结束熔断状态后仍可能再进入熔断状态。&#10;&#10;![](C:\Users\Administrator\Downloads\一些文档\springcloud资料\springcloud资料\笔记(含alibaba笔记)\Spring Cloud Alibaba.assets\image-20200802143314524.png)">
        </outline>
      </outline>
      <outline text="5.SentinelResource注解" _note="    # 0.说明&#10;    - https://github.com/alibaba/Sentinel/wiki/%E6%B3%A8%E8%A7%A3%E6%94%AF%E6%8C%81&#10;&#10;![](C:\Users\Administrator\Downloads\一些文档\springcloud资料\springcloud资料\笔记(含alibaba笔记)\Spring Cloud Alibaba.assets\image-20200802150527319.png)&#10;&#10;     @GetMapping(&quot;/sentinel/test1&quot;)&#10;        @SentinelResource(value = &quot;aa&quot;,blockHandler = &quot;fallBack&quot;,fallback = &quot;fall&quot;)&#10;        public String test1(int id){&#10;            log.info(&quot;sentinel test1&quot;);&#10;            if(id&lt;0)		&#10;                throw new RuntimeException(&quot;非法参数!!!&quot;);&#10;            }&#10;            return &quot;sentinel test1 :&quot;+id;&#10;        }&#10;    		//降级异常处理&#10;        public String fallBack(int id,BlockException e){&#10;                if(e instanceof FlowException){&#10;                    return &quot;当前服务已被流控! &quot;+e.getClass().getCanonicalName();&#10;                }&#10;                return &quot;当前服务已被降级处理! &quot;+e.getClass().getCanonicalName();&#10;        }&#10;    		//异常处理&#10;        public String fall(int id){&#10;            return &quot;当前服务已不可用!&quot;;&#10;        }">
      </outline>
    </outline>
  </outline>
  <outline text="5.整合环境公共依赖" _note="**spring boot 2.2+**&#10;&#10;**springcloud Hoxton**&#10;&#10;**springcloud alibaba 2.2.1+**&#10;&#10;    # 0.构建项目并引入依赖&#10;&#10;&#10;    &lt;properties&gt;&#10;      &lt;java.version&gt;1.8&lt;/java.version&gt;&#10;      &lt;spring-cloud.version&gt;Hoxton.SR6&lt;/spring-cloud.version&gt;&#10;      &lt;spring.cloud.alibaba.version&gt;2.2.1.RELEASE&lt;/spring.cloud.alibaba.version&gt;&#10;    &lt;/properties&gt;&#10;&#10;    &lt;dependencyManagement&gt;&#10;      &lt;dependencies&gt;&#10;        &lt;!--引入springcloud alibaba--&gt;&#10;        &lt;dependency&gt;&#10;          &lt;groupId&gt;com.alibaba.cloud&lt;/groupId&gt;&#10;          &lt;artifactId&gt;spring-cloud-alibaba-dependencies&lt;/artifactId&gt;&#10;          &lt;version&gt;${spring.cloud.alibaba.version}&lt;/version&gt;&#10;          &lt;type&gt;pom&lt;/type&gt;&#10;          &lt;scope&gt;import&lt;/scope&gt;&#10;        &lt;/dependency&gt;&#10;        &lt;!--引入springcloud--&gt;&#10;        &lt;dependency&gt;&#10;          &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;&#10;          &lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt;&#10;          &lt;version&gt;${spring-cloud.version}&lt;/version&gt;&#10;          &lt;type&gt;pom&lt;/type&gt;&#10;          &lt;scope&gt;import&lt;/scope&gt;&#10;        &lt;/dependency&gt;&#10;      &lt;/dependencies&gt;&#10;    &lt;/dependencyManagement&gt;&#10;&#10;------------------------------------------------------------------------">
  </outline>
</outline>
  </body>
</opml>
